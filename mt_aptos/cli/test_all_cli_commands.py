#!/usr/bin/env python3
"""
üß™ MODERNTENSOR CLI TEST SUITE
=================================

File n√†y ch·ª©a t·∫•t c·∫£ c√°c l·ªánh CLI c√≥ s·∫µn trong ModernTensor SDK v√† c√°ch test ch√∫ng.
S·ª≠ d·ª•ng file n√†y ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ c√°c t√≠nh nƒÉng CLI v√† l√†m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.

Author: ModernTensor Team
Version: 1.0.0
"""

import click
import asyncio
import os
import sys
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
import tempfile
import shutil
from typing import List, Dict, Any

# Add project root to Python path
project_root = str(Path(__file__).parent.parent.parent)
sys.path.append(project_root)

console = Console()

# ASCII Art cho ModernTensor
MODERNTENSOR_ASCII = r"""
‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
"""

class CLITestSuite:
    """Test suite for all ModernTensor CLI commands."""
    
    def __init__(self):
        self.test_dir = None
        self.console = Console()
        self.passed_tests = []
        self.failed_tests = []
        self.commands_tested = 0
        
    def setup_test_environment(self):
        """Setup temporary test environment."""
        self.test_dir = tempfile.mkdtemp(prefix="moderntensor_cli_test_")
        os.chdir(self.test_dir)
        self.console.print(f"[yellow]üìÅ Test directory: {self.test_dir}[/yellow]")
        
    def cleanup_test_environment(self):
        """Cleanup test environment."""
        if self.test_dir and os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
            self.console.print(f"[yellow]üßπ Cleaned up test directory[/yellow]")
    
    def show_header(self):
        """Display test suite header."""
        self.console.print(Text(MODERNTENSOR_ASCII, style="bold cyan"))
        self.console.print(Panel.fit(
            """[bold yellow]üß™ MODERNTENSOR CLI TEST SUITE[/bold yellow]

[green]M·ª•c ƒë√≠ch:[/green] Test t·∫•t c·∫£ c√°c CLI commands c√≥ s·∫µn trong ModernTensor SDK
[green]Ph·∫°m vi:[/green] HD Wallet, Contract, Query, Transaction, Metagraph, Stake
[green]M·ª•c ti√™u:[/green] ƒê·∫£m b·∫£o t·∫•t c·∫£ commands ho·∫°t ƒë·ªông ƒë√∫ng v√† c√≥ documentation

[bold red]‚ö†Ô∏è  L∆∞u √Ω:[/bold red] ƒê√¢y l√† test suite comprehensive - m·ªôt s·ªë commands c·∫ßn network connection""",
            title="üöÄ CLI Test Suite",
            border_style="cyan"
        ))

    def test_command_help(self, command_path: str, description: str):
        """Test help command for a CLI module."""
        try:
            # Test help command
            result = os.system(f"python -m moderntensor.mt_aptos.cli.main {command_path} --help >/dev/null 2>&1")
            if result == 0:
                self.passed_tests.append(f"{command_path} --help")
                self.console.print(f"[green]‚úÖ {description} help command[/green]")
            else:
                self.failed_tests.append(f"{command_path} --help")
                self.console.print(f"[red]‚ùå {description} help command[/red]")
        except Exception as e:
            self.failed_tests.append(f"{command_path} --help: {str(e)}")
            self.console.print(f"[red]‚ùå {description} help command: {str(e)}[/red]")
        
        self.commands_tested += 1

    def test_hd_wallet_commands(self):
        """Test HD Wallet CLI commands."""
        self.console.print("\n[bold cyan]üè¶ Testing HD Wallet Commands[/bold cyan]")
        
        commands = [
            ("hdwallet", "HD Wallet main"),
            ("hdwallet create", "Create wallet"),
            ("hdwallet load", "Load wallet"),
            ("hdwallet create-coldkey", "Create coldkey"),
            ("hdwallet create-hotkey", "Create hotkey"),
            ("hdwallet export-key", "Export key"),
            ("hdwallet get-account", "Get account"),
            ("hdwallet import-key", "Import key"),
            ("hdwallet restore", "Restore wallet"),
            ("hdwallet info", "Wallet info"),
            ("hdwallet help", "HD Wallet help")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_query_commands(self):
        """Test Query CLI commands."""
        self.console.print("\n[bold cyan]üîç Testing Query Commands[/bold cyan]")
        
        commands = [
            ("query-cli", "Query main"),
            ("query-cli account", "Query account"),
            ("query-cli transaction", "Query transaction"),
            ("query-cli network", "Query network"),
            ("query-cli subnet", "Query subnet")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_transaction_commands(self):
        """Test Transaction CLI commands."""
        self.console.print("\n[bold cyan]üí∏ Testing Transaction Commands[/bold cyan]")
        
        commands = [
            ("tx-cli", "Transaction main"),
            ("tx-cli send-coin", "Send coin"),
            ("tx-cli send-token", "Send token"),
            ("tx-cli submit", "Submit transaction"),
            ("tx-cli history", "Transaction history"),
            ("tx-cli details", "Transaction details"),
            ("tx-cli estimate-gas", "Estimate gas")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_metagraph_commands(self):
        """Test Metagraph CLI commands."""
        self.console.print("\n[bold cyan]üîÑ Testing Metagraph Commands[/bold cyan]")
        
        commands = [
            ("metagraph", "Metagraph main"),
            ("metagraph register-miner", "Register miner"),
            ("metagraph register-validator", "Register validator"),
            ("metagraph update-miner", "Update miner"),
            ("metagraph update-validator", "Update validator"),
            ("metagraph list-miners", "List miners"),
            ("metagraph list-validators", "List validators"),
            ("metagraph subnet-info", "Subnet info"),
            ("metagraph network-stats", "Network stats")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_stake_commands(self):
        """Test Stake CLI commands."""
        self.console.print("\n[bold cyan]ü•© Testing Stake Commands[/bold cyan]")
        
        commands = [
            ("stake", "Stake main"),
            ("stake add", "Add stake"),
            ("stake remove", "Remove stake"),
            ("stake list", "List stakes"),
            ("stake rewards", "Stake rewards"),
            ("stake delegate", "Delegate stake"),
            ("stake undelegate", "Undelegate stake")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_contract_commands(self):
        """Test Contract CLI commands."""
        self.console.print("\n[bold cyan]üìú Testing Contract Commands[/bold cyan]")
        
        commands = [
            ("contract", "Contract main"),
            ("contract compile", "Compile contract"),
            ("contract deploy", "Deploy contract"),
            ("contract upgrade", "Upgrade contract"),
            ("contract info", "Contract info"),
            ("contract structure", "Contract structure"),
            ("contract status", "Contract status")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_wallet_commands(self):
        """Test traditional Wallet CLI commands."""
        self.console.print("\n[bold cyan]üíº Testing Traditional Wallet Commands[/bold cyan]")
        
        commands = [
            ("wallet", "Wallet main"),
            ("wallet create", "Create account"),
            ("wallet list", "List accounts"),
            ("wallet balance", "Check balance"),
            ("wallet info", "Account info")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def show_usage_examples(self):
        """Display comprehensive usage examples."""
        self.console.print("\n[bold yellow]üìñ USAGE EXAMPLES[/bold yellow]")
        
        examples_table = Table(title="ModernTensor CLI Commands Examples")
        examples_table.add_column("Category", style="cyan", no_wrap=True)
        examples_table.add_column("Command", style="green")
        examples_table.add_column("Description", style="yellow")

        examples = [
            # HD Wallet Examples
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet create --name my_wallet", "T·∫°o v√≠ HD m·ªõi"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet load --name my_wallet", "T·∫£i v√≠ HD"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet create-coldkey --wallet my_wallet --name validator", "T·∫°o coldkey"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet create-hotkey --wallet my_wallet --coldkey validator --name miner", "T·∫°o hotkey"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet export-key --wallet my_wallet --coldkey validator", "Xu·∫•t private key"),
            
            # Query Examples  
            ("Query", "python -m moderntensor.mt_aptos.cli.main query account 0x123...", "Truy v·∫•n th√¥ng tin t√†i kho·∫£n"),
            ("Query", "python -m moderntensor.mt_aptos.cli.main query miner --uid my_miner", "Truy v·∫•n th√¥ng tin miner"),
            ("Query", "python -m moderntensor.mt_aptos.cli.main query network --stats", "Truy v·∫•n th·ªëng k√™ m·∫°ng"),
            
            # Transaction Examples
            ("Transaction", "python -m moderntensor.mt_aptos.cli.main tx send-coin --to 0x123... --amount 1000000", "G·ª≠i APT coin"),
            ("Transaction", "python -m moderntensor.mt_aptos.cli.main tx history --account 0x123...", "Xem l·ªãch s·ª≠ giao d·ªãch"),
            
            # Metagraph Examples
            ("Metagraph", "python -m moderntensor.mt_aptos.cli.main metagraph register-miner --subnet 1 --stake 1000000", "ƒêƒÉng k√Ω miner"),
            ("Metagraph", "python -m moderntensor.mt_aptos.cli.main metagraph register-validator --subnet 1", "ƒêƒÉng k√Ω validator"),
            ("Metagraph", "python -m moderntensor.mt_aptos.cli.main metagraph list-miners --subnet 1", "Li·ªát k√™ miners"),
            
            # Stake Examples
            ("Stake", "python -m moderntensor.mt_aptos.cli.main stake add --amount 1000000 --subnet 1", "Th√™m stake"),
            ("Stake", "python -m moderntensor.mt_aptos.cli.main stake rewards --account 0x123...", "Xem rewards"),
            
            # Contract Examples
            ("Contract", "python -m moderntensor.mt_aptos.cli.main contract compile", "Compile smart contract"),
            ("Contract", "python -m moderntensor.mt_aptos.cli.main contract info", "Xem th√¥ng tin contract"),
            ("Contract", "python -m moderntensor.mt_aptos.cli.main contract structure", "Xem c·∫•u tr√∫c contract"),
        ]

        for category, command, description in examples:
            examples_table.add_row(category, command, description)

        self.console.print(examples_table)

    def show_test_results(self):
        """Display test results summary."""
        self.console.print(f"\n[bold yellow]üìä TEST RESULTS SUMMARY[/bold yellow]")
        
        results_table = Table(title="CLI Test Results")
        results_table.add_column("Metric", style="cyan")
        results_table.add_column("Value", style="green")

        total_tests = len(self.passed_tests) + len(self.failed_tests)
        success_rate = (len(self.passed_tests) / total_tests * 100) if total_tests > 0 else 0

        results_table.add_row("Total Commands Tested", str(self.commands_tested))
        results_table.add_row("Passed Tests", str(len(self.passed_tests)))
        results_table.add_row("Failed Tests", str(len(self.failed_tests)))
        results_table.add_row("Success Rate", f"{success_rate:.1f}%")

        self.console.print(results_table)

        if self.failed_tests:
            self.console.print(f"\n[bold red]‚ùå Failed Tests:[/bold red]")
            for test in self.failed_tests:
                self.console.print(f"  ‚Ä¢ {test}")

        if self.passed_tests:
            self.console.print(f"\n[bold green]‚úÖ Passed Tests:[/bold green]")
            for test in self.passed_tests[:10]:  # Show first 10
                self.console.print(f"  ‚Ä¢ {test}")
            if len(self.passed_tests) > 10:
                self.console.print(f"  ... and {len(self.passed_tests) - 10} more")

    def show_cli_documentation(self):
        """Show comprehensive CLI documentation."""
        self.console.print(f"\n[bold yellow]üìö CLI DOCUMENTATION[/bold yellow]")
        
        doc_panel = Panel.fit(
            """[bold cyan]üîß INSTALLATION & SETUP[/bold cyan]

[yellow]1. C√†i ƒë·∫∑t dependencies:[/yellow]
pip install -r requirements.txt

[yellow]2. Setup Aptos CLI:[/yellow]
curl -fsSL "https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v2.3.1/aptos-cli-2.3.1-$(uname -s)-$(uname -m).zip" -o aptos-cli.zip
unzip -o aptos-cli.zip -d ~/bin
chmod +x ~/bin/aptos

[yellow]3. Ki·ªÉm tra c√†i ƒë·∫∑t:[/yellow]
python -m moderntensor.mt_aptos.cli.main --help

[bold cyan]üè¶ HD WALLET WORKFLOW[/bold cyan]

[yellow]Workflow c∆° b·∫£n:[/yellow]
1. T·∫°o v√≠: hdwallet create --name my_wallet
2. T·∫£i v√≠: hdwallet load --name my_wallet  
3. T·∫°o coldkey: hdwallet create-coldkey --wallet my_wallet --name validator
4. T·∫°o hotkey: hdwallet create-hotkey --wallet my_wallet --coldkey validator --name miner

[bold cyan]üîç QUERY OPERATIONS[/bold cyan]

[yellow]Truy v·∫•n d·ªØ li·ªáu blockchain:[/yellow]
‚Ä¢ account: Th√¥ng tin t√†i kho·∫£n
‚Ä¢ miner/validator: Th√¥ng tin nodes
‚Ä¢ network: Th·ªëng k√™ m·∫°ng
‚Ä¢ transaction: Chi ti·∫øt giao d·ªãch

[bold cyan]üí∏ TRANSACTION OPERATIONS[/bold cyan]

[yellow]Th·ª±c hi·ªán giao d·ªãch:[/yellow]
‚Ä¢ send-coin: G·ª≠i APT tokens
‚Ä¢ submit: Submit giao d·ªãch custom
‚Ä¢ history: L·ªãch s·ª≠ giao d·ªãch

[bold cyan]üîÑ METAGRAPH OPERATIONS[/bold cyan]

[yellow]Qu·∫£n l√Ω m·∫°ng ModernTensor:[/yellow]
‚Ä¢ register-miner/validator: ƒêƒÉng k√Ω nodes
‚Ä¢ update-*: C·∫≠p nh·∫≠t th√¥ng tin
‚Ä¢ list-*: Li·ªát k√™ nodes
‚Ä¢ subnet-info: Th√¥ng tin subnet

[bold cyan]ü•© STAKING OPERATIONS[/bold cyan]

[yellow]Qu·∫£n l√Ω stake:[/yellow]
‚Ä¢ add/remove: Th√™m/b·ªõt stake
‚Ä¢ delegate: Delegate cho validators
‚Ä¢ rewards: Xem rewards

[bold cyan]üìú CONTRACT OPERATIONS[/bold cyan]

[yellow]Qu·∫£n l√Ω smart contracts:[/yellow]
‚Ä¢ compile: Bi√™n d·ªãch contracts
‚Ä¢ deploy: Deploy l√™n blockchain
‚Ä¢ info: Th√¥ng tin contract hi·ªán t·∫°i""",
            title="üìñ Complete CLI Guide",
            border_style="yellow"
        )
        
        self.console.print(doc_panel)

    def run_interactive_demo(self):
        """Run interactive CLI demo."""
        self.console.print(f"\n[bold yellow]üéÆ INTERACTIVE DEMO MODE[/bold yellow]")
        
        demo_commands = [
            "python -m moderntensor.mt_aptos.cli.main --help",
            "python -m moderntensor.mt_aptos.cli.main hdwallet --help", 
            "python -m moderntensor.mt_aptos.cli.main query --help",
            "python -m moderntensor.mt_aptos.cli.main metagraph --help",
            "python -m moderntensor.mt_aptos.cli.main contract info",
        ]
        
        for cmd in demo_commands:
            if click.confirm(f"\n[yellow]Ch·∫°y command: {cmd}?[/yellow]"):
                self.console.print(f"[cyan]Executing: {cmd}[/cyan]")
                os.system(cmd)
            else:
                self.console.print("[yellow]Skipped[/yellow]")

    def run_all_tests(self):
        """Run all CLI tests."""
        try:
            self.setup_test_environment()
            self.show_header()
            
            # Test all CLI modules
            self.test_hd_wallet_commands()
            self.test_query_commands() 
            self.test_transaction_commands()
            self.test_metagraph_commands()
            self.test_stake_commands()
            self.test_contract_commands()
            self.test_wallet_commands()
            
            # Show results and documentation
            self.show_test_results()
            self.show_usage_examples()
            self.show_cli_documentation()
            
            # Interactive demo
            if click.confirm("\n[yellow]Ch·∫°y interactive demo?[/yellow]"):
                self.run_interactive_demo()
                
        finally:
            self.cleanup_test_environment()

@click.group()
def cli():
    """ModernTensor CLI Test Suite"""
    pass

@cli.command()
def test():
    """Ch·∫°y test suite ƒë·∫ßy ƒë·ªß cho t·∫•t c·∫£ CLI commands."""
    suite = CLITestSuite()
    suite.run_all_tests()

@cli.command()
def examples():
    """Hi·ªÉn th·ªã examples s·ª≠ d·ª•ng CLI."""
    suite = CLITestSuite()
    suite.show_header()
    suite.show_usage_examples()
    suite.show_cli_documentation()

@cli.command()
def help_all():
    """Hi·ªÉn th·ªã help cho t·∫•t c·∫£ commands."""
    suite = CLITestSuite()
    suite.show_header()
    
    commands = [
        "python -m moderntensor.mt_aptos.cli.main --help",
        "python -m moderntensor.mt_aptos.cli.main hdwallet --help",
        "python -m moderntensor.mt_aptos.cli.main query --help", 
        "python -m moderntensor.mt_aptos.cli.main tx --help",
        "python -m moderntensor.mt_aptos.cli.main metagraph --help",
        "python -m moderntensor.mt_aptos.cli.main stake --help",
        "python -m moderntensor.mt_aptos.cli.main contract --help",
    ]
    
    for cmd in commands:
        console.print(f"\n[bold cyan]{'='*60}[/bold cyan]")
        console.print(f"[yellow]Command: {cmd}[/yellow]")
        console.print(f"[bold cyan]{'='*60}[/bold cyan]")
        os.system(cmd)

@cli.command()
def demo():
    """Ch·∫°y demo t∆∞∆°ng t√°c v·ªõi CLI."""
    suite = CLITestSuite()
    suite.show_header()
    suite.run_interactive_demo()

if __name__ == "__main__":
    cli() 
"""
üß™ MODERNTENSOR CLI TEST SUITE
=================================

File n√†y ch·ª©a t·∫•t c·∫£ c√°c l·ªánh CLI c√≥ s·∫µn trong ModernTensor SDK v√† c√°ch test ch√∫ng.
S·ª≠ d·ª•ng file n√†y ƒë·ªÉ ki·ªÉm tra t·∫•t c·∫£ c√°c t√≠nh nƒÉng CLI v√† l√†m h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng.

Author: ModernTensor Team
Version: 1.0.0
"""

import click
import asyncio
import os
import sys
from pathlib import Path
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
import tempfile
import shutil
from typing import List, Dict, Any

# Add project root to Python path
project_root = str(Path(__file__).parent.parent.parent)
sys.path.append(project_root)

console = Console()

# ASCII Art cho ModernTensor
MODERNTENSOR_ASCII = r"""
‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
"""

class CLITestSuite:
    """Test suite for all ModernTensor CLI commands."""
    
    def __init__(self):
        self.test_dir = None
        self.console = Console()
        self.passed_tests = []
        self.failed_tests = []
        self.commands_tested = 0
        
    def setup_test_environment(self):
        """Setup temporary test environment."""
        self.test_dir = tempfile.mkdtemp(prefix="moderntensor_cli_test_")
        os.chdir(self.test_dir)
        self.console.print(f"[yellow]üìÅ Test directory: {self.test_dir}[/yellow]")
        
    def cleanup_test_environment(self):
        """Cleanup test environment."""
        if self.test_dir and os.path.exists(self.test_dir):
            shutil.rmtree(self.test_dir)
            self.console.print(f"[yellow]üßπ Cleaned up test directory[/yellow]")
    
    def show_header(self):
        """Display test suite header."""
        self.console.print(Text(MODERNTENSOR_ASCII, style="bold cyan"))
        self.console.print(Panel.fit(
            """[bold yellow]üß™ MODERNTENSOR CLI TEST SUITE[/bold yellow]

[green]M·ª•c ƒë√≠ch:[/green] Test t·∫•t c·∫£ c√°c CLI commands c√≥ s·∫µn trong ModernTensor SDK
[green]Ph·∫°m vi:[/green] HD Wallet, Contract, Query, Transaction, Metagraph, Stake
[green]M·ª•c ti√™u:[/green] ƒê·∫£m b·∫£o t·∫•t c·∫£ commands ho·∫°t ƒë·ªông ƒë√∫ng v√† c√≥ documentation

[bold red]‚ö†Ô∏è  L∆∞u √Ω:[/bold red] ƒê√¢y l√† test suite comprehensive - m·ªôt s·ªë commands c·∫ßn network connection""",
            title="üöÄ CLI Test Suite",
            border_style="cyan"
        ))

    def test_command_help(self, command_path: str, description: str):
        """Test help command for a CLI module."""
        try:
            # Test help command
            result = os.system(f"python -m moderntensor.mt_aptos.cli.main {command_path} --help >/dev/null 2>&1")
            if result == 0:
                self.passed_tests.append(f"{command_path} --help")
                self.console.print(f"[green]‚úÖ {description} help command[/green]")
            else:
                self.failed_tests.append(f"{command_path} --help")
                self.console.print(f"[red]‚ùå {description} help command[/red]")
        except Exception as e:
            self.failed_tests.append(f"{command_path} --help: {str(e)}")
            self.console.print(f"[red]‚ùå {description} help command: {str(e)}[/red]")
        
        self.commands_tested += 1

    def test_hd_wallet_commands(self):
        """Test HD Wallet CLI commands."""
        self.console.print("\n[bold cyan]üè¶ Testing HD Wallet Commands[/bold cyan]")
        
        commands = [
            ("hdwallet", "HD Wallet main"),
            ("hdwallet create", "Create wallet"),
            ("hdwallet load", "Load wallet"),
            ("hdwallet create-coldkey", "Create coldkey"),
            ("hdwallet create-hotkey", "Create hotkey"),
            ("hdwallet export-key", "Export key"),
            ("hdwallet get-account", "Get account"),
            ("hdwallet import-key", "Import key"),
            ("hdwallet restore", "Restore wallet"),
            ("hdwallet info", "Wallet info"),
            ("hdwallet help", "HD Wallet help")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_query_commands(self):
        """Test Query CLI commands."""
        self.console.print("\n[bold cyan]üîç Testing Query Commands[/bold cyan]")
        
        commands = [
            ("query-cli", "Query main"),
            ("query-cli account", "Query account"),
            ("query-cli transaction", "Query transaction"),
            ("query-cli network", "Query network"),
            ("query-cli subnet", "Query subnet")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_transaction_commands(self):
        """Test Transaction CLI commands."""
        self.console.print("\n[bold cyan]üí∏ Testing Transaction Commands[/bold cyan]")
        
        commands = [
            ("tx-cli", "Transaction main"),
            ("tx-cli send-coin", "Send coin"),
            ("tx-cli send-token", "Send token"),
            ("tx-cli submit", "Submit transaction"),
            ("tx-cli history", "Transaction history"),
            ("tx-cli details", "Transaction details"),
            ("tx-cli estimate-gas", "Estimate gas")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_metagraph_commands(self):
        """Test Metagraph CLI commands."""
        self.console.print("\n[bold cyan]üîÑ Testing Metagraph Commands[/bold cyan]")
        
        commands = [
            ("metagraph", "Metagraph main"),
            ("metagraph register-miner", "Register miner"),
            ("metagraph register-validator", "Register validator"),
            ("metagraph update-miner", "Update miner"),
            ("metagraph update-validator", "Update validator"),
            ("metagraph list-miners", "List miners"),
            ("metagraph list-validators", "List validators"),
            ("metagraph subnet-info", "Subnet info"),
            ("metagraph network-stats", "Network stats")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_stake_commands(self):
        """Test Stake CLI commands."""
        self.console.print("\n[bold cyan]ü•© Testing Stake Commands[/bold cyan]")
        
        commands = [
            ("stake", "Stake main"),
            ("stake add", "Add stake"),
            ("stake remove", "Remove stake"),
            ("stake list", "List stakes"),
            ("stake rewards", "Stake rewards"),
            ("stake delegate", "Delegate stake"),
            ("stake undelegate", "Undelegate stake")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_contract_commands(self):
        """Test Contract CLI commands."""
        self.console.print("\n[bold cyan]üìú Testing Contract Commands[/bold cyan]")
        
        commands = [
            ("contract", "Contract main"),
            ("contract compile", "Compile contract"),
            ("contract deploy", "Deploy contract"),
            ("contract upgrade", "Upgrade contract"),
            ("contract info", "Contract info"),
            ("contract structure", "Contract structure"),
            ("contract status", "Contract status")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def test_wallet_commands(self):
        """Test traditional Wallet CLI commands."""
        self.console.print("\n[bold cyan]üíº Testing Traditional Wallet Commands[/bold cyan]")
        
        commands = [
            ("wallet", "Wallet main"),
            ("wallet create", "Create account"),
            ("wallet list", "List accounts"),
            ("wallet balance", "Check balance"),
            ("wallet info", "Account info")
        ]
        
        for cmd, desc in commands:
            self.test_command_help(cmd, desc)

    def show_usage_examples(self):
        """Display comprehensive usage examples."""
        self.console.print("\n[bold yellow]üìñ USAGE EXAMPLES[/bold yellow]")
        
        examples_table = Table(title="ModernTensor CLI Commands Examples")
        examples_table.add_column("Category", style="cyan", no_wrap=True)
        examples_table.add_column("Command", style="green")
        examples_table.add_column("Description", style="yellow")

        examples = [
            # HD Wallet Examples
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet create --name my_wallet", "T·∫°o v√≠ HD m·ªõi"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet load --name my_wallet", "T·∫£i v√≠ HD"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet create-coldkey --wallet my_wallet --name validator", "T·∫°o coldkey"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet create-hotkey --wallet my_wallet --coldkey validator --name miner", "T·∫°o hotkey"),
            ("HD Wallet", "python -m moderntensor.mt_aptos.cli.main hdwallet export-key --wallet my_wallet --coldkey validator", "Xu·∫•t private key"),
            
            # Query Examples  
            ("Query", "python -m moderntensor.mt_aptos.cli.main query account 0x123...", "Truy v·∫•n th√¥ng tin t√†i kho·∫£n"),
            ("Query", "python -m moderntensor.mt_aptos.cli.main query miner --uid my_miner", "Truy v·∫•n th√¥ng tin miner"),
            ("Query", "python -m moderntensor.mt_aptos.cli.main query network --stats", "Truy v·∫•n th·ªëng k√™ m·∫°ng"),
            
            # Transaction Examples
            ("Transaction", "python -m moderntensor.mt_aptos.cli.main tx send-coin --to 0x123... --amount 1000000", "G·ª≠i APT coin"),
            ("Transaction", "python -m moderntensor.mt_aptos.cli.main tx history --account 0x123...", "Xem l·ªãch s·ª≠ giao d·ªãch"),
            
            # Metagraph Examples
            ("Metagraph", "python -m moderntensor.mt_aptos.cli.main metagraph register-miner --subnet 1 --stake 1000000", "ƒêƒÉng k√Ω miner"),
            ("Metagraph", "python -m moderntensor.mt_aptos.cli.main metagraph register-validator --subnet 1", "ƒêƒÉng k√Ω validator"),
            ("Metagraph", "python -m moderntensor.mt_aptos.cli.main metagraph list-miners --subnet 1", "Li·ªát k√™ miners"),
            
            # Stake Examples
            ("Stake", "python -m moderntensor.mt_aptos.cli.main stake add --amount 1000000 --subnet 1", "Th√™m stake"),
            ("Stake", "python -m moderntensor.mt_aptos.cli.main stake rewards --account 0x123...", "Xem rewards"),
            
            # Contract Examples
            ("Contract", "python -m moderntensor.mt_aptos.cli.main contract compile", "Compile smart contract"),
            ("Contract", "python -m moderntensor.mt_aptos.cli.main contract info", "Xem th√¥ng tin contract"),
            ("Contract", "python -m moderntensor.mt_aptos.cli.main contract structure", "Xem c·∫•u tr√∫c contract"),
        ]

        for category, command, description in examples:
            examples_table.add_row(category, command, description)

        self.console.print(examples_table)

    def show_test_results(self):
        """Display test results summary."""
        self.console.print(f"\n[bold yellow]üìä TEST RESULTS SUMMARY[/bold yellow]")
        
        results_table = Table(title="CLI Test Results")
        results_table.add_column("Metric", style="cyan")
        results_table.add_column("Value", style="green")

        total_tests = len(self.passed_tests) + len(self.failed_tests)
        success_rate = (len(self.passed_tests) / total_tests * 100) if total_tests > 0 else 0

        results_table.add_row("Total Commands Tested", str(self.commands_tested))
        results_table.add_row("Passed Tests", str(len(self.passed_tests)))
        results_table.add_row("Failed Tests", str(len(self.failed_tests)))
        results_table.add_row("Success Rate", f"{success_rate:.1f}%")

        self.console.print(results_table)

        if self.failed_tests:
            self.console.print(f"\n[bold red]‚ùå Failed Tests:[/bold red]")
            for test in self.failed_tests:
                self.console.print(f"  ‚Ä¢ {test}")

        if self.passed_tests:
            self.console.print(f"\n[bold green]‚úÖ Passed Tests:[/bold green]")
            for test in self.passed_tests[:10]:  # Show first 10
                self.console.print(f"  ‚Ä¢ {test}")
            if len(self.passed_tests) > 10:
                self.console.print(f"  ... and {len(self.passed_tests) - 10} more")

    def show_cli_documentation(self):
        """Show comprehensive CLI documentation."""
        self.console.print(f"\n[bold yellow]üìö CLI DOCUMENTATION[/bold yellow]")
        
        doc_panel = Panel.fit(
            """[bold cyan]üîß INSTALLATION & SETUP[/bold cyan]

[yellow]1. C√†i ƒë·∫∑t dependencies:[/yellow]
pip install -r requirements.txt

[yellow]2. Setup Aptos CLI:[/yellow]
curl -fsSL "https://github.com/aptos-labs/aptos-core/releases/download/aptos-cli-v2.3.1/aptos-cli-2.3.1-$(uname -s)-$(uname -m).zip" -o aptos-cli.zip
unzip -o aptos-cli.zip -d ~/bin
chmod +x ~/bin/aptos

[yellow]3. Ki·ªÉm tra c√†i ƒë·∫∑t:[/yellow]
python -m moderntensor.mt_aptos.cli.main --help

[bold cyan]üè¶ HD WALLET WORKFLOW[/bold cyan]

[yellow]Workflow c∆° b·∫£n:[/yellow]
1. T·∫°o v√≠: hdwallet create --name my_wallet
2. T·∫£i v√≠: hdwallet load --name my_wallet  
3. T·∫°o coldkey: hdwallet create-coldkey --wallet my_wallet --name validator
4. T·∫°o hotkey: hdwallet create-hotkey --wallet my_wallet --coldkey validator --name miner

[bold cyan]üîç QUERY OPERATIONS[/bold cyan]

[yellow]Truy v·∫•n d·ªØ li·ªáu blockchain:[/yellow]
‚Ä¢ account: Th√¥ng tin t√†i kho·∫£n
‚Ä¢ miner/validator: Th√¥ng tin nodes
‚Ä¢ network: Th·ªëng k√™ m·∫°ng
‚Ä¢ transaction: Chi ti·∫øt giao d·ªãch

[bold cyan]üí∏ TRANSACTION OPERATIONS[/bold cyan]

[yellow]Th·ª±c hi·ªán giao d·ªãch:[/yellow]
‚Ä¢ send-coin: G·ª≠i APT tokens
‚Ä¢ submit: Submit giao d·ªãch custom
‚Ä¢ history: L·ªãch s·ª≠ giao d·ªãch

[bold cyan]üîÑ METAGRAPH OPERATIONS[/bold cyan]

[yellow]Qu·∫£n l√Ω m·∫°ng ModernTensor:[/yellow]
‚Ä¢ register-miner/validator: ƒêƒÉng k√Ω nodes
‚Ä¢ update-*: C·∫≠p nh·∫≠t th√¥ng tin
‚Ä¢ list-*: Li·ªát k√™ nodes
‚Ä¢ subnet-info: Th√¥ng tin subnet

[bold cyan]ü•© STAKING OPERATIONS[/bold cyan]

[yellow]Qu·∫£n l√Ω stake:[/yellow]
‚Ä¢ add/remove: Th√™m/b·ªõt stake
‚Ä¢ delegate: Delegate cho validators
‚Ä¢ rewards: Xem rewards

[bold cyan]üìú CONTRACT OPERATIONS[/bold cyan]

[yellow]Qu·∫£n l√Ω smart contracts:[/yellow]
‚Ä¢ compile: Bi√™n d·ªãch contracts
‚Ä¢ deploy: Deploy l√™n blockchain
‚Ä¢ info: Th√¥ng tin contract hi·ªán t·∫°i""",
            title="üìñ Complete CLI Guide",
            border_style="yellow"
        )
        
        self.console.print(doc_panel)

    def run_interactive_demo(self):
        """Run interactive CLI demo."""
        self.console.print(f"\n[bold yellow]üéÆ INTERACTIVE DEMO MODE[/bold yellow]")
        
        demo_commands = [
            "python -m moderntensor.mt_aptos.cli.main --help",
            "python -m moderntensor.mt_aptos.cli.main hdwallet --help", 
            "python -m moderntensor.mt_aptos.cli.main query --help",
            "python -m moderntensor.mt_aptos.cli.main metagraph --help",
            "python -m moderntensor.mt_aptos.cli.main contract info",
        ]
        
        for cmd in demo_commands:
            if click.confirm(f"\n[yellow]Ch·∫°y command: {cmd}?[/yellow]"):
                self.console.print(f"[cyan]Executing: {cmd}[/cyan]")
                os.system(cmd)
            else:
                self.console.print("[yellow]Skipped[/yellow]")

    def run_all_tests(self):
        """Run all CLI tests."""
        try:
            self.setup_test_environment()
            self.show_header()
            
            # Test all CLI modules
            self.test_hd_wallet_commands()
            self.test_query_commands() 
            self.test_transaction_commands()
            self.test_metagraph_commands()
            self.test_stake_commands()
            self.test_contract_commands()
            self.test_wallet_commands()
            
            # Show results and documentation
            self.show_test_results()
            self.show_usage_examples()
            self.show_cli_documentation()
            
            # Interactive demo
            if click.confirm("\n[yellow]Ch·∫°y interactive demo?[/yellow]"):
                self.run_interactive_demo()
                
        finally:
            self.cleanup_test_environment()

@click.group()
def cli():
    """ModernTensor CLI Test Suite"""
    pass

@cli.command()
def test():
    """Ch·∫°y test suite ƒë·∫ßy ƒë·ªß cho t·∫•t c·∫£ CLI commands."""
    suite = CLITestSuite()
    suite.run_all_tests()

@cli.command()
def examples():
    """Hi·ªÉn th·ªã examples s·ª≠ d·ª•ng CLI."""
    suite = CLITestSuite()
    suite.show_header()
    suite.show_usage_examples()
    suite.show_cli_documentation()

@cli.command()
def help_all():
    """Hi·ªÉn th·ªã help cho t·∫•t c·∫£ commands."""
    suite = CLITestSuite()
    suite.show_header()
    
    commands = [
        "python -m moderntensor.mt_aptos.cli.main --help",
        "python -m moderntensor.mt_aptos.cli.main hdwallet --help",
        "python -m moderntensor.mt_aptos.cli.main query --help", 
        "python -m moderntensor.mt_aptos.cli.main tx --help",
        "python -m moderntensor.mt_aptos.cli.main metagraph --help",
        "python -m moderntensor.mt_aptos.cli.main stake --help",
        "python -m moderntensor.mt_aptos.cli.main contract --help",
    ]
    
    for cmd in commands:
        console.print(f"\n[bold cyan]{'='*60}[/bold cyan]")
        console.print(f"[yellow]Command: {cmd}[/yellow]")
        console.print(f"[bold cyan]{'='*60}[/bold cyan]")
        os.system(cmd)

@cli.command()
def demo():
    """Ch·∫°y demo t∆∞∆°ng t√°c v·ªõi CLI."""
    suite = CLITestSuite()
    suite.show_header()
    suite.run_interactive_demo()

if __name__ == "__main__":
    cli() 