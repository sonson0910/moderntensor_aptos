#!/usr/bin/env python3
"""
üéØ MODERNTENSOR CLI DEMO SCRIPT
===============================

Script n√†y demo c√°c l·ªánh CLI c∆° b·∫£n v√† test t√≠nh nƒÉng.
S·ª≠ d·ª•ng ƒë·ªÉ ki·ªÉm tra nhanh CLI c√≥ ho·∫°t ƒë·ªông kh√¥ng.

Usage:
    python moderntensor/test_cli_demo.py
"""

import os
import sys
import subprocess
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from pathlib import Path

console = Console()

def run_command(cmd, description):
    """Run a command and show results."""
    console.print(f"\n[yellow]üîÑ {description}[/yellow]")
    console.print(f"[cyan]Command: {cmd}[/cyan]")
    
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            console.print(f"[green]‚úÖ Success[/green]")
            if result.stdout.strip():
                console.print(f"[dim]{result.stdout[:200]}...[/dim]" if len(result.stdout) > 200 else f"[dim]{result.stdout}[/dim]")
        else:
            console.print(f"[red]‚ùå Failed (exit code: {result.returncode})[/red]")
            if result.stderr.strip():
                console.print(f"[red]{result.stderr[:200]}...[/red]" if len(result.stderr) > 200 else f"[red]{result.stderr}[/red]")
    except subprocess.TimeoutExpired:
        console.print(f"[red]‚ùå Timeout after 30 seconds[/red]")
    except Exception as e:
        console.print(f"[red]‚ùå Error: {str(e)}[/red]")

def main():
    """Main demo function."""
    console.print(Panel.fit(
        """[bold yellow]üéØ MODERNTENSOR CLI DEMO[/bold yellow]

[green]M·ª•c ƒë√≠ch:[/green] Test nhanh c√°c CLI commands ƒë·ªÉ ƒë·∫£m b·∫£o ch√∫ng ho·∫°t ƒë·ªông
[green]Scope:[/green] Test basic commands v√† help systems
[green]Output:[/green] B√°o c√°o nhanh v·ªÅ t√¨nh tr·∫°ng CLI

[bold red]‚ö†Ô∏è  Note:[/bold red] Demo n√†y ch·ªâ test help commands, kh√¥ng th·ª±c hi·ªán operations th·ª±c t·∫ø""",
        title="üöÄ CLI Demo Script",
        border_style="cyan"
    ))

    # Test basic CLI access
    commands_to_test = [
        ("python -m moderntensor.mt_aptos.cli.main --help", "Main CLI Help"),
        ("python -m moderntensor.mt_aptos.cli.main hdwallet --help", "HD Wallet Help"),
        ("python -m moderntensor.mt_aptos.cli.main query-cli --help", "Query Commands Help"),
        ("python -m moderntensor.mt_aptos.cli.main tx-cli --help", "Transaction Commands Help"),
        ("python -m moderntensor.mt_aptos.cli.main metagraph-cli --help", "Metagraph Commands Help"),
        ("python -m moderntensor.mt_aptos.cli.main stake-cli --help", "Stake Commands Help"),
        ("python -m moderntensor.mt_aptos.cli.main aptosctl --help", "AptosCtl Commands Help"),
    ]

    console.print(f"\n[bold cyan]üß™ Testing CLI Commands[/bold cyan]")
    
    passed = 0
    failed = 0
    
    for cmd, desc in commands_to_test:
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                console.print(f"[green]‚úÖ {desc}[/green]")
                passed += 1
            else:
                console.print(f"[red]‚ùå {desc}[/red]")
                failed += 1
        except:
            console.print(f"[red]‚ùå {desc} (Exception)[/red]")
            failed += 1

    # Show results
    console.print(f"\n[bold yellow]üìä DEMO RESULTS[/bold yellow]")
    
    results_table = Table(title="CLI Demo Results")
    results_table.add_column("Metric", style="cyan")
    results_table.add_column("Value", style="green")
    
    total = passed + failed
    success_rate = (passed / total * 100) if total > 0 else 0
    
    results_table.add_row("Total Tests", str(total))
    results_table.add_row("Passed", str(passed))
    results_table.add_row("Failed", str(failed))
    results_table.add_row("Success Rate", f"{success_rate:.1f}%")
    
    console.print(results_table)

    # Show next steps
    console.print(f"\n[bold yellow]üî• NEXT STEPS[/bold yellow]")
    
    if success_rate > 80:
        console.print(Panel.fit(
            """[bold green]üéâ CLI is working well![/bold green]

[yellow]Try these commands:[/yellow]
‚Ä¢ python moderntensor/mt_aptos/cli/test_all_cli_commands.py test
‚Ä¢ python moderntensor/mt_aptos/cli/test_all_cli_commands.py examples  
‚Ä¢ python moderntensor/mt_aptos/cli/test_all_cli_commands.py demo

[yellow]Quick Reference:[/yellow]
‚Ä¢ Check out: moderntensor/CLI_QUICK_REFERENCE.md
‚Ä¢ Full documentation in README files""",
            title="‚úÖ Success",
            border_style="green"
        ))
    else:
        console.print(Panel.fit(
            """[bold red]‚ö†Ô∏è  Some CLI commands failed[/bold red]

[yellow]Troubleshooting:[/yellow]
‚Ä¢ Check if you're in the correct directory
‚Ä¢ Verify Python dependencies: pip install -r requirements.txt
‚Ä¢ Check Python path and module imports
‚Ä¢ Try: python -m moderntensor.mt_aptos.cli.main --help

[yellow]Debug:[/yellow]
‚Ä¢ Run with verbose: python -m moderntensor.mt_aptos.cli.main --verbose
‚Ä¢ Check specific command help manually""",
            title="‚ö†Ô∏è  Issues Found",
            border_style="red"
        ))

    # Show available files
    console.print(f"\n[bold yellow]üìÇ CREATED FILES[/bold yellow]")
    
    files_table = Table(title="CLI Files Available")
    files_table.add_column("File", style="cyan")
    files_table.add_column("Description", style="yellow")
    files_table.add_column("Usage", style="green")
    
    files_table.add_row(
        "moderntensor/mt_aptos/cli/test_all_cli_commands.py",
        "Comprehensive CLI test suite",
        "python moderntensor/mt_aptos/cli/test_all_cli_commands.py test"
    )
    files_table.add_row(
        "moderntensor/CLI_QUICK_REFERENCE.md",
        "Quick reference guide for all commands",
        "cat moderntensor/CLI_QUICK_REFERENCE.md"
    )
    files_table.add_row(
        "moderntensor/test_cli_demo.py",
        "This demo script",
        "python moderntensor/test_cli_demo.py"
    )
    
    console.print(files_table)

if __name__ == "__main__":
    main() 
 